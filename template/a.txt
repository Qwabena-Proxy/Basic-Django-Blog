Build And Publish A VS Code Extension Using Javascript
{
    In this post, i will show you how to build and publish a vs code extension. We are gonna build a simple extension that translates text to any language. Let's get straight to it.  The first thing you need to do is to make sure you have Git and Node.js installed. Then we will have to install Yeoman and VS Code Extension Generator, we can install the using this command:  npm install -g yo generator-code  Once it is installed, run this command: yo code This will prompt you some options similar to the image below     This will create a new extension project in the current directory. Open the project in VS Code, and it should look like this:    In the 'extension.js' file, replace the code in there to the code below  // The module 'vscode' contains the VS Code extensibility API // Import the module and reference it with the alias vscode in your code below const vscode = require('vscode');  // this method is called when your extension is activated // your extension is activated the very first time the command is executed  /**  * @param {vscode.ExtensionContext} context  */ function activate(context) {  	// Use the console to output diagnostic information (console.log) and errors (console.error) 	// This line of code will only be executed once when your extension is activated 	console.log('Congratulations, your extension "easy-translator" is now active!');  	// The command has been defined in the package.json file 	// Now provide the implementation of the command with  registerCommand 	// The commandId parameter must match the command field in package.json 	let disposable = vscode.commands.registerCommand('easy-translator.easyTranslator', function () { 		// The code you place here will be executed every time your command is executed 		 		const editor = vscode.window.activeTextEditor; 		const selectedText = editor.selection 		const text = editor.document.getText(selectedText)   		const data = JSON.stringify([ 			{ 				"Text": text, 			} 		]); 		var XMLHttpRequest = require('xhr2'); 		const xhr = new XMLHttpRequest(); 		xhr.withCredentials = true; 		 		xhr.addEventListener("readystatechange", function () { 			if (this.readyState === this.DONE) { 				console.log(this.responseText); 				vscode.window.showInformationMessage(this.responseText); 				editor.edit(builder => builder.replace(selectedText, this.responseText)) 			} 		}); 		 		xhr.open("POST", "https://microsoft-translator-text.p.rapidapi.com/translate?to%5B0%5D=de&api-version=3.0&profanityAction=NoAction&textType=plain"); 		xhr.setRequestHeader("content-type", "application/json"); 		xhr.setRequestHeader("X-RapidAPI-Key", "  YOUR-RAPIDAPI-KEY"); 		xhr.setRequestHeader("X-RapidAPI-Host", "microsoft-translator-text.p.rapidapi.com"); 		 		xhr.send(data);       		 		// Display a message box to the user 		// vscode.window.showInformationMessage('Hi guys, subscribe!'); 	});  	context.subscriptions.push(disposable); }  // this method is called when your extension is deactivated function deactivate() {}  module.exports = { 	activate, 	deactivate }   The code above will get a selected text, and convert that to german when the extension is run. Let's test this out.   To run this extension, press f5, this will open a new vs code window with the extension activated.   So to test this, select a text in the editor, and open your command pallete by running CMD+SHIFT+P(on mac) or CTRL+SHIFT+P(on windows), and run Hello World(you can change this name), this will then convert the text you selected into a json response, the response will contain the language of the text you selected and also the translated version of that text in german. The image below shows the process:          It is that easy to build a vs code extension, if you want to watch the full and detailed 20 minutes tutorial where i also show how to publish the extension to the vs code marketplace, click the video below:
}

Roadmap For Learning Django
{
Getting into a new framework might be challenging. Django is no exception. There is just too much to learn and it can be overwhelming. But with the right roadmap and learning resources, the journey can be simplified.  In this post, I will talk about a simple roadmap for learning the django framework. So, let's get into it.  1. Learn Python  When starting out with django, it is advisable to learn python before learning django. Many new developers dive straight into django without having a knowledge of python. Django is a web framework built with python, and everything that is done in django is done with the python programming language. So, knowing python before learning django is an advantage and will make it easier for you to understand what is going on while developing in django.  2. Get Familiar With The Command Lines  In django, you will work with command lines a lot. Django has it's own command lines for doing a lot of things in your application. They might be a lot of command lines to learn, but you don't need to learn every single one of it. Sometimes you might just need to look it up. You might just need to learn a few that you will use 90% of the time.  3. Learn The Basic Django Concepts  Django has some process you'll need to go through every single time you want to build a web app. These are the first things you need to learn in django, they are:  Creating a new project Creating a new app Url Routing Setting Up Templates & Static Files Running your projects on the localhost 4. Learn The Django Views  Most of what you in django will be done in the views. The where you do all the server rendering and most of the python code will be done in there. There are two types of django views which are Function Based Views & Class Based Views. You can learn anyone of this to get started, but most tutorials will start with the function based views, when you know that very well you can move on to the class based views.  5. Learn The Django Models  Django has what is called the models. Models are like databases, but in form of python classes. With the django models, you can create and migrate data to the database. Each model is written in python classes, in which each class has it's own attribute. So, you can think of the name of the model class as the name of the database, and the class attributes as each table in the database.  6. Databases  Using databases is the easiest part of django. Django has a powerful feature known as Object-Relational Mapper(ORM) which allows you to interact with the databases without writing a single line of SQL code. Django uses SQLite as it's default database for every project, but you can also integrate third-party databases like Postgresql or MongoDB.  7. Authentication and Authorization  Authentication in django has been made very easy because most of the work has already been done by django for us, all you just need to do is to access the classes and functions already provided by django. Django has a default User model which is used for saving user data when a user sign up to your platform. Django also has a default auth method which allows us to easily authenticate a user into out apllication.  8. Deployment  Deploying a django project for the first time can be stressful and filled with bugs. But learning how to deploy your django project will definitely make it an easier process. There are a lot of platforms in which you can use to deploy your django project, but the most popular is Heroku. With heroku you can easily deploy your django project if you know how to configure your app for deployment.  Conclusion  The things listed above is just a roadmap to help you get started with django. There is still a lot to learn in django. Hopefully you find post helpful and goodluck on your journey.
}

If You Use Django, You Need This VS Code Extension
{
    If you use django, you will know that when you import your html file into your templates folder, you need to add the static tag to all the links in the html file. This can be a lot of work to do when there is a lot of links in the html file.   But i may have come up with a solution to that. I created a VS Code extension called Auto-Django. It allows you to automatically add static tags all the links in the html file. Let me show you how it works:  - Download the extension  All you need to do is to open your VS Code and go into the Extension tab, then search Auto-Django, and hit install. Or you can just click this link to install it https://marketplace.visualstudio.com/items?itemName=CodeWithTomi.auto-django  Once you install it, it should look like this:       - Using the extension  Now that the extension is installed, what you need to do is to use/test the extension. To do this, open up an html file, then press CMD+SHIFT+P(For Mac) or CTRL+SHIFT+P(For Windows) to open the command pallete. Once you do this, search Auto Django, like this:      Then hit enter, once you do that, all the links will automatically have the static tag added to them like this    Now you can use this feature every time you need it.  Drop a comment below to say what you feel about it. Thanks.
}

Python With SQL Databases - Full Crash Course | Python Database Connectivity Tutorial
{
    SQLite is a popular, open-source, embedded relational database management system that is used in many applications and devices. It is lightweight, easy to use, and requires minimal setup, making it a good choice for storing and manipulating data in Python.  In this tutorial, we will explore how to connect Python with SQLite, the most widely deployed SQL database engine in the world. We will cover everything from installation and setup to basic CRUD operations (create, read, update, delete) and more advanced concepts such as prepared statements and transaction management.  To get started, you will need to have Python and SQLite installed on your computer. If you do not already have Python installed, you can download it from the official Python website (https://www.python.org/). For this tutorial, we will be using Python 3.9, but earlier versions should work as well.  SQLite is included with Python by default, so you do not need to install it separately. You can access the SQLite API in Python through the sqlite3 module, which is part of the standard library.  To connect to an SQLite database in Python, we can use the connect() function of the sqlite3 module, which takes the name of the database file as an argument. If the file does not exist, it will be created automatically.  import sqlite3  # Connect to the database cnx = sqlite3.connect("my_database.db") With the connection established, we can now start executing SQL queries. To do this, we can use the cursor() method of the connection object to create a new cursor, which allows us to execute SQL commands and retrieve results.  # Create a cursor cursor = cnx.cursor()  # Execute a SQL query cursor.execute("SELECT * FROM users")  # Fetch the results results = cursor.fetchall()  # Print the results print(results)  This code will execute a SELECT * FROM users query on the users table and print the results to the console.  In addition to basic CRUD operations (create, read, update, delete), we can also use the execute() method to perform other operations such as INSERT, UPDATE, and DELETE. For example, the following code will insert a new record into the users table:  # Insert a new record cursor.execute("INSERT INTO users (name, email) VALUES (?, ?)", ("John Smith", "john@example.com"))  # Commit the changes to the database cnx.commit()   It is also possible to use prepared statements to protect against SQL injection attacks and improve performance. A prepared statement is a SQL query that is pre-compiled and stored in the database server, allowing it to be reused multiple times with different parameter values.  To use prepared statements in Python, we can use the execute() method with placeholders (represented by ?) for the parameter values. The placeholders are then replaced with the actual values when the statement is executed.  # Create a prepared statement stmt = "INSERT INTO users (name, email) VALUES (?, ?)"  # Execute the prepared statement with different parameter values cursor.execute(stmt, ("Bob Smith", "bob@example.com")) cursor.execute(stmt, ("Alice Smith", "alice@example.com"))  # Commit the changes to the database cnx.commit()  Finally, it is important to properly manage transactions when working with databases. A transaction is a sequence of SQL statements that are treated as a single unit of work. Either all of the statements in the transaction are executed, or none of them are, ensuring the integrity of the data.  To use transactions in Python, we can use the autocommit attribute of the connection object. By default, this attribute is set to True, which means that each SQL statement is committed automatically. To use transactions, we can set autocommit to False and use the commit() and rollback() methods to control the transaction.  # Disable autocommit cnx.autocommit = False  try:     # Execute multiple statements as a single transaction     cursor.execute("INSERT INTO users (name, email) VALUES (?, ?)", ("John Smith", "john@example.com"))     cursor.execute("INSERT INTO users (name, email) VALUES (?, ?)", ("Jane Doe", "jane@example.com"))      # Commit the changes     cnx.commit() except Exception as e:     # Rollback the changes on error     cnx.rollback()  # Enable autocommit cnx.autocommit = True  This code will insert two records into the users table as a single transaction. If any of the statements fail, the entire transaction will be rolled back and the data will remain unchanged.  I hope this tutorial has helped you understand the basics of connecting Python with SQLite databases. For more information and advanced topics, you can refer to the official documentation and other online resources.
}

God of War
{
    God of War is an action-adventure game franchise created by David Jaffe at Sony's Santa Monica Studio. It began in 2005 on the PlayStation 2 (PS2) video game console and has become a flagship series for PlayStation, consisting of nine installments across multiple platforms. Based on ancient mythologies, the story follows Kratos, a Spartan warrior and later the Greek God of War, who was tricked into killing his family by his former master, the original Greek God of War Ares. This sets off a series of events that leads to wars with the different mythological pantheons. The Greek-based games see Kratos follow a path of vengeance due to the machinations of the Olympian gods, while the Norse-based games, which introduce his son Atreus as a secondary protagonist, show Kratos on a path of redemption and inadvertently coming into conflict with the Norse gods.
}